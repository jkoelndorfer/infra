#!/bin/bash

set -o pipefail

RC_OK=0
RC_MISSING_ARG=10
RC_NO_SUCH_CONFIG=11
RC_DIRTY_REPOSITORY=12
RC_FAILED_DETERMINING_PACKER_VERSION=13

script_dir=$(dirname "$0")
script_name="$(basename "$script_dir")/$(basename "$0")"

source "$script_dir/conf/global.conf"

function ami_next_build_number() {
    local ami_role=$1
    local ami_software_version=$2

    local describe_filter_template
    read -r -d '' describe_filter_template <<'EOF'
        [
            {
                "Name":   "tag:johnk:ami:role",
                "Values": [$role]
            },
            {
                "Name":   "tag:johnk:ami:software-version",
                "Values": [$software_version]
            }
        ]
EOF
    describe_filter=$(
        jq \
            --null-input \
            --compact-output \
            --arg role "$ami_role" \
            --arg software_version "$ami_software_version" \
            "$describe_filter_template"
    )
    local last_build_number=$(
        aws ec2 describe-images \
            --owners self \
            --filters "$describe_filter" \
            --query "Images[*].Tags[?Key=='johnk:ami:build-number'].Value" \
            --output text |
        sed -E -e 's/\t/\n/g' |
        grep -E '^[0-9]+$' |
        sort --numeric --reverse |
        head -n 1
    )
    if [[ -z "$last_build_number" ]]; then
        echo "1"
    else
        echo "$(( last_build_number + 1 ))"
    fi
}

function packer_build_template() {
    local ami_role=$1
    local ami_software_version=$2
    local ami_build_number=$3
    local infra_revision=$4
    local ami_packer_version=$5
    local ami_name="${ami_role} ${ami_software_version}-${ami_build_number}"

    local packer_template
    read -r -d '' packer_template <<'EOF'
        {
            "builders": [{
                "name": "aws",
                "type": "amazon-ebs",
                "region": "us-east-1",
                "source_ami_filter": {
                    "filters":     {"name": $base_ami_name_filter},
                    "owners":      [$base_ami_owner],
                    "most_recent": true
                },
                "instance_type": "t3.micro",
                "ssh_username":  "admin",
                "ami_name":      $ami_name,
                "tags": {
                    "Name":                            $ami_name,
                    "johnk:ami:role":                  $ami_role,
                    "johnk:ami:packer-version":        $ami_packer_version,
                    "johnk:ami:software-version":      $ami_software_version,
                    "johnk:ami:build-number":          $ami_build_number,
                    "johnk:ami:source-ami":            "{{ .SourceAMI }}",
                    "johnk:ami:source-ami-name":       "{{ .SourceAMIName }}",
                    "johnk:ami:source-ami-owner":      "{{ .SourceAMIOwner }}",
                    "johnk:ami:source-ami-owner-name": "{{ .SourceAMIOwnerName }}"
                }
            }],
            "provisioners": [{
                "type":            "ansible",
                "playbook_file":   "../srvtools/ansible/server-build.yml",
                "use_proxy":       false,
                "extra_arguments": [
                    "--extra-vars", "infra_revision=" + $infra_revision,
                    # Packer automatically passes packer_build_name to Ansible, which is used
                    # by Ansible to set server_hardware_type automatically. This allows us
                    # to define additional builders using this same provisioner, if we want.
                    "--extra-vars", "server_role=" + $ami_role,
                    "--extra-vars", "server_software_version=" + $ami_software_version
                ]
            }]
        }
EOF

    jq \
        --null-input \
        --compact-output \
        --arg ami_role             "$ami_role" \
        --arg ami_packer_version   "$ami_packer_version" \
        --arg ami_software_version "$ami_software_version" \
        --arg ami_build_number     "$ami_build_number" \
        --arg ami_name             "$ami_name" \
        --arg base_ami_name_filter "$BASE_AMI_NAME_FILTER" \
        --arg base_ami_owner       "$BASE_AMI_OWNER" \
        --arg infra_revision       "$infra_revision" \
        "$(echo "$packer_template" | grep -E -v '^\s*#')"
}

function main() {
    local -a packer_args=()
    if [[ "$1" == '--debug' ]]; then
        shift
        packer_args=('-on-error=ask' '-debug')
    fi
    local config=$1

    if [[ -z "$config" ]]; then
        echo "$script_name: missing operand for configuration file of AMI to build" >&2
        exit "$RC_MISSING_ARG"
    fi

    if ! source "$config" 2>/dev/null; then
        echo "No such configuration file: $config" >&2
        exit "$RC_NO_SUCH_CONFIG"
    fi

    cd "$script_dir"
    local infra_revision=$(../revision)
    local dirty_repo=0
    if [[ "$infra_revision" =~ -dirty$ ]]; then
        dirty_repo=1
        if [[ "$PACKER_ALLOW_BUILD_FROM_DIRTY_REPO" == '1' ]]; then
            echo 'Permitting a Packer build from a dirty repository.' >&2
            echo 'Only use this for testing!' >&2
        else
            {
                echo 'Refusing to build an AMI from a dirty repository. '
                echo 'If you are REALLY sure you want to do this, set '
                echo 'PACKER_ALLOW_BUILD_FROM_DIRTY_REPO=1 and rerun '
                echo 'this script.'
            } >&2
            exit "$RC_DIRTY_REPOSITORY"
        fi
    fi

    local packer_version=$(packer version | head -n1 | grep -Eo '([0-9]+\.)*[0-9]+')
    if [[ -z "$packer_version" ]]; then
        echo 'FATAL: Unable to determine Packer version.' >&2
        exit "$RC_FAILED_DETERMINING_PACKER_VERSION"
    fi
    local ami_build_number=$(ami_next_build_number "$AMI_ROLE" "$AMI_SOFTWARE_VERSION")
    local packer_template=$(packer_build_template "$AMI_ROLE" "$AMI_SOFTWARE_VERSION" "$ami_build_number" "$infra_revision" "$packer_version")
    echo "$packer_template" | packer build "${packer_args[@]}" -
    if [[ "$?" == '0' && "$dirty_repo" == '1' ]]; then
        echo 'NOTICE: This image was built from a DIRTY REPOSITORY!' >&2
        echo 'Rebuild the image from a clean repository when testing is finished.' >&2
    fi
}

main "$@"
