---

# Library role to provision a Docker service.
#
# Required variables:
#
# service_name:    name of the service to provision
# image_filename:  path to the file containing the docker image to run
# user:            dictionary containing two items: name and uid
# group:           dictionary containing two items: name and gid

# Optional variables:
# capabilities:    list of additional capabilities to grant the container, e.g. 'NET_ADMIN'
# directories:     list of data directories to be created; directories will be owned by `user`/`group`
# networks:        list of networks to attach this container to
# published_ports: list of container ports to publish, as expected by the docker_container module
# volumes:         list of volumes to attach to the container, as expected by the docker_container module
# env:             additional environment variables to pass to the container; PUID, PGID, UMASK_SET, and TZ
#                  are passed implicitly
# security_opts:   list of security options


- name: lookup persisted docker image
  shell:
    cmd: 'printf "$(< "$DOCKER_IMAGE_FILE")"'
    executable: /bin/bash
  environment:
    DOCKER_IMAGE_FILE: "{{ image_filename }}"
  register: service_image_lookup
  changed_when: false

- name: set service_docker_image from lookup
  set_fact:
    service_docker_image: "{{ service_image_lookup.stdout.rstrip() }}"

- name: create service group
  group:
    name: "{{ group.name }}"
    gid:  "{{ group.gid }}"

- name: create service user
  user:
    name:    "{{ user.name }}"
    uid:     "{{ user.uid }}"
    comment: "{{ service_name }} service"
    group:   "{{ group.name }}"
    shell:   "{{ nologin_shell }}"

- name: create service directories
  file:
    path:  "{{ item }}"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ group.name }}"
    mode:  0750
  with_items: "{{ directories }}"

- name: create service network
  docker_network:
    name: "{{ service_name }}"
  when: networks is undefined

- name: start service container
  docker_container:
    name:       "{{ service_name }}"
    image:      "{{ service_docker_image }}"
    log_driver: journald
    log_options:
      tag: "{{ service_name }}"
    capabilities: "{{ capabilities | default([]) }}"
    networks: "{{ networks | default([{'name': service_name}]) }}"

    # seccomp:unconfined is required to run newer versions of the
    # linuxserver/syncthing container on Debian Buster (and probably
    # other containers published by linuxserver).
    #
    # See:
    #
    # https://github.com/mbentley/docker-timemachine/issues/92
    # https://github.com/oznu/docker-homebridge/issues/461
    security_opts: "{{ (security_opts | default([])) + ['seccomp:unconfined'] }}"

    env: "{{ docker_service_default_env_vars | combine(env | default({})) }}"
    published_ports: "{{ published_ports | default([]) }}"
    volumes: "{{ volumes | default([]) }}"
    restart_policy: unless-stopped
