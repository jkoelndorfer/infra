---

# Due to ordering, this will fail if the administrator
# configured has the same name as the built-in admin user.

# Since we shouldn't be using built-in usernames anyway, that
# should be fine.
- name: configure administrator
  user:
    name:    "{{ admin_username }}"
    state:   present
    comment: "{{ admin_comment }}"
    shell:   "{{ admin_shell }}"
    group:   "{{ admin_group }}"
    uid:     "{{ admin_uid }}"

- name: configure administrator authorized key
  authorized_key:
    user: "{{ admin_username }}"
    key: "{{ admin_ssh_pubkey }}"

- name: install sudo
  package:
    name: sudo
    state: present

- name: configure core sudo
  template:
    owner: root
    group: root
    mode:  0440
    src:   sudoers.j2
    dest:  "{{ sudoers_path }}"
    validate: "{{ visudo_path }} -cf %s"

- name: remove built-in admin user
  user:
    name: "{{ item }}"
    state:  absent
    remove: yes
  with_items: "{{ cloud_builtin_users }}"

- name: remove built-in sudo rules
  file:
    state: absent
    path:  "{{ sudoers_d_path }}/{{ item }}"
  with_items: "{{ sudoers_d_builtins }}"

- name: set hostname
  shell: |-
    . /etc/metadata
    if [[ -n "$INSTANCE_DNS" ]]; then
      new_hostname="$INSTANCE_DNS"
    else
      instance_ip="$(curl -s http://169.254.169.254/2018-09-24/meta-data/public-ipv4)"
      new_hostname="${INSTANCE_NAME}-$(echo "$instance_ip" | sed -e 's/\./-/g')"
    fi
    hostname "$new_hostname"
    echo "$new_hostname" > /etc/hostname
    echo "127.0.2.1 $new_hostname" >> /etc/hosts
  args:
    executable: /bin/bash
